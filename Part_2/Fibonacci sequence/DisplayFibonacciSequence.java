/**
 * The DisplayFibonacciSequence program creates the parent thread that will
 * output the sequence generated by the child thread.
 * 
 *
 * @author Mamadou Bah
 * 
 */

public class DisplayFibonacciSequence extends Thread implements Runnable {

	// array receive sent to the father
	private long[] sequenceData;

	/**
	 * class constructor for class DisplayFibonacciSequence
	 * 
	 *
	 * @param sequenceData -- the array for storing Fibonacci sequence
	 * 
	 */
	public DisplayFibonacciSequence(long[] sequenceData) {
		this.sequenceData = sequenceData;

	}

	/**
	 * Output the Fibonacci sequence generated by the child thread
	 * 
	 * @param no parameter
	 * 
	 * @return void
	 * 
	 */
	@Override
	public void run() {

		System.out.println("Parent thread starts and creates the child thread...");

		// Parent thread creates a separate thread that will generate the Fibonacci
		// numbers
		FibonacciCalculation childThread = new FibonacciCalculation(sequenceData);

		System.out.println("Child thread starts...");
		childThread.start();

		// wait for childThread to finish
		try {
			System.out.println("Parent thread wait for the child thread to finish ...");
			childThread.join();
			System.out.println("Child thread is finished!!!");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		System.out.println("Parent thread start displaying the sequence generated by the child thread");
		System.out.println("");

		System.out.println(">>>>>>>>> The Fibonacci sequence <<<<<<<<<<");
		for (int i = 0; i < sequenceData.length; i++) {
			System.out.print(sequenceData[i] + ", ");

		}
		System.out.println("...");
		System.out.println(">>>>>>>>>>>>>>>>>>>> <<<<<<<<<<<<<<<<<<<<");

		System.out.println("");
		System.out.println("Parent thread finished!!!");

	}

}
